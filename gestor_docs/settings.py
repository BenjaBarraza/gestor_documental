"""
Django settings for gestor_docs project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from decouple import config
from pathlib import Path
import os
from django.contrib.messages import constants as messages
from django.urls import reverse_lazy

import cloudinary
import cloudinary.uploader
import cloudinary.api


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/



ALLOWED_HOSTS = ['gestor-documental-c1tp.onrender.com', '127.0.0.1', 'localhost', '192.168.18.119']


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True

EMAIL_HOST_USER = 'antoniobarraza1133@gmail.com'  # tu correo de Gmail
EMAIL_HOST_PASSWORD = 'iqjpdwxplkwnbqoo'  # clave de 16 dígitos

DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

EMAIL_TEMPLATE_NAME = 'usuarios/password_reset_email.html'



# settings.py

SECRET_KEY = config('SECRET_KEY')
DEBUG = config('DEBUG', default=False, cast=bool)

RECAPTCHA_SITE_KEY = config('RECAPTCHA_SITE_KEY')
RECAPTCHA_SECRET_KEY = config('RECAPTCHA_SECRET_KEY')








# Security settings
if not DEBUG:
    # HTTPS Settings
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

    # HTTP Strict Transport Security (HSTS)
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

    # Content Type Sniffing Protection
    SECURE_CONTENT_TYPE_NOSNIFF = True

    # XSS Protection
    SECURE_BROWSER_XSS_FILTER = True

    # Clickjacking Protection
    X_FRAME_OPTIONS = 'DENY'

# Content Security Policy (CSP)
# CONTENT_SECURITY_POLICY = {
#     "DIRECTIVES": {
#         "default-src": ("'self'",),
#         "style-src": (
#             "'self'",
#             'https://fonts.googleapis.com',
#             'https://cdn.jsdelivr.net',
#             "'unsafe-inline'",
#         ),
#         "font-src": (
#             "'self'",
#             'https://fonts.gstatic.com',
#         ),
#         "script-src": (
#             "'self'",
#             'https://cdn.jsdelivr.net',
#             'https://www.google.com',
#             'https://www.gstatic.com',
#             "'unsafe-inline'",
#         ),
#     }
# }




# Referrer Policy
REFERRER_POLICY = "no-referrer-when-downgrade"

# Permissions Policy (ahora totalmente definida)
PERMISSIONS_POLICY = {
    "accelerometer": "()",
    "autoplay": "()",
    "camera": "()",
    "clipboard-write": "()",
    "fullscreen": "*",  # permitido (sino no podrías ver documentos fullscreen)
    "geolocation": "()",
    "gyroscope": "()",
    "magnetometer": "()",
    "microphone": "()",
    "payment": "()",
    "usb": "()",
    "xr-spatial-tracking": "()"
}






# Application definition

MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

# --- Configuración de mensajes ---
# (opcional, si quieres personalizar clases CSS de Bootstrap)
MESSAGE_TAGS = {
    messages.DEBUG: 'secondary',
    messages.INFO: 'info',
    messages.SUCCESS: 'success',
    messages.WARNING: 'warning',
    messages.ERROR: 'danger',
}
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'documentos',
    'widget_tweaks',
    'csp',
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt',
    'api',
    'cloudinary',
    'cloudinary_storage',

    

    # Mis apps
    'usuarios',
    'publico',
    'emails',
    'dashboard',
    'tutoriales',
    'recordatorios',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', 
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ALLOW_ALL_ORIGINS = True




ROOT_URLCONF = 'gestor_docs.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'gestor_docs.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Santiago'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

# --- Autenticación ---
LOGIN_URL = '/usuarios/login/'          # ✅ Esto redirige correctamente a tu nueva app de login
LOGIN_REDIRECT_URL = '/dashboard/'      # ✅ Después de loguearte te manda a documentos (tu home)
LOGOUT_REDIRECT_URL = reverse_lazy('documentos:home')             # ✅ Logout te manda al home



DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#MEDIA_URL = '/media/'
#MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'



DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'





# Cloudinary
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': os.environ.get('CLOUDINARY_CLOUD_NAME'),
    'API_KEY': os.environ.get('CLOUDINARY_API_KEY'),
    'API_SECRET': os.environ.get('CLOUDINARY_API_SECRET'),
}
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'